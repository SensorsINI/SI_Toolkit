modeling:
  NET_NAME: 'Dense-6IN-16H1-16H2-5OUT-0'
  # NET_NAME: 'GRU-6IN-16H1-16H2-5OUT-0'
  PATH_TO_MODELS: './SI_Toolkit/TF/Models/'
  RNN_FULL_NAME: 'GRU-6IN-64H1-64H2-5OUT-0'
  # RNN_FULL_NAME: 'GRU-5IN-32H1-32H2-1OUT-0'
  RNN_PATH: './save_tf/'
  # RNN_PATH: './save_tf/long_3_55/'
  # RNN_PATH: './controllers/nets/mpc_on_rnn_tf/'
  PATH_TO_NORMALIZATION_INFO: './SI_Toolkit/NormalizationInfo/Dataset-1-norm.csv'
  TRAINING_FILES: './ExperimentRecordings/Dataset-1/Train/'
  VALIDATION_FILES: './ExperimentRecordings/Dataset-1/Validate/'
  TEST_FILES: './ExperimentRecordings/Dataset-1/Test/'
  PREDICTION_FEATURES_NAMES: ['angle_cos', 'angle_sin', 'angleD', 'position', 'positionD']
  PyTorch:
    RNN_FULL_NAME: 'GRU-5IN-32H1-32H2-1OUT-0'
    INPUTS_LIST: ['position', 'angle']
    OUTPUTS_LIST: ['Q']
    PATH_SAVE: './save/nets/rnn_as_mpc_pt/'
  TensorFlow:
    RNN_FULL_NAME: 'GRU-5IN-64H1-64H2-1OUT-0'
    INPUTS_LIST: ['position', 'angle', 'positionD', 'angleD', 'target_position']
    OUTPUTS_LIST: ['Q']
    PATH_SAVE: './save/nets/rnn_as_mpc_tf/'

training_default:
  # For training closed loop dynamics model:
  inputs: ['Q', 'angle_sin', 'angle_cos', 'angleD', 'position', 'positionD']
  outputs: ['angle_sin', 'angle_cos', 'angleD', 'position', 'positionD']
  # For training open loop dynamics model:
  # inputs = ['position', 'positionD', 'angle_sin', 'angle_cos', 'angleD']
  # outputs = inputs_list
  # For training of RNN imitating MPC:
  # inputs = ['position', 'positionD', 'angle', 'angleD', 'target_position']
  # outputs = ['Q']

testing:
  tests: ['GRU-6IN-16H1-16H2-5OUT-0', 'Dense-6IN-16H1-16H2-5OUT-0', 'Euler-predictor']  # May be 'Euler', Euler-predictor, name of network or None = 'Dense-16H1-16H2'
  TEST_FILE: ['./ExperimentRecordings/Dataset-1/Test/Test.csv']