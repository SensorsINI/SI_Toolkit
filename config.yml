modeling:
  NET_NAME: 'GRU-6IN-32H1-32H2-5OUT-11'
  PATH_TO_MODELS: './SI_Toolkit/TF/Models/'
  RNN_FULL_NAME: 'GRU-6IN-64H1-64H2-5OUT-0'
  RNN_PATH: './save_tf/'
  PATH_TO_NORMALIZATION_INFO: './SI_Toolkit/NormalizationInfo/NI_Dataset15_Train.csv'
  TRAINING_FILES: './ExperimentRecordings/Dataset-15/Train/'
  VALIDATION_FILES: './ExperimentRecordings/Dataset-15/Validate/'
  TEST_FILES: './ExperimentRecordings/Dataset-15/Test/'
  PREDICTION_FEATURES_NAMES: ['angle_cos', 'angle_sin', 'angleD', 'position', 'positionD']

normalization:
  # PATH HAS TO END WITH A SOLIDUS ("/") CHARACTER
  folder_with_data_to_calculate_norm_info: './ExperimentRecordings/Dataset-15/Train/'

training_default:
  # For training closed loop dynamics model:
  control_inputs: ['Q']
  state_inputs: ['angle_sin', 'angle_cos', 'angleD', 'position', 'positionD']
  outputs: ['angle_sin', 'angle_cos', 'angleD', 'position', 'positionD']
  # For training open loop dynamics model:
  # inputs = ['position', 'positionD', 'angle_sin', 'angle_cos', 'angleD']
  # outputs = inputs_list
  # For training of RNN imitating MPC:
  # inputs = ['position', 'positionD', 'angle', 'angleD', 'target_position']
  # outputs = ['Q']

testing:
  PATH_TO_NORMALIZATION_INFO: './SI_Toolkit/NormalizationInfo/NI_Dataset13_Train.csv'
  tests: ['GRU-6IN-32H1-32H2-5OUT-11']  # May be 'Euler', Euler-predictor, name of network or None = 'Dense-16H1-16H2'
  TEST_FILE: ['ExperimentRecordings/Dataset-13/Test/Experiment-399.csv']